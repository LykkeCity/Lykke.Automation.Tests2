// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Client.AutorestClient.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class EthereumTransactionHistoricalResponse
    {
        /// <summary>
        /// Initializes a new instance of the
        /// EthereumTransactionHistoricalResponse class.
        /// </summary>
        public EthereumTransactionHistoricalResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// EthereumTransactionHistoricalResponse class.
        /// </summary>
        /// <param name="transactionStatus">Possible values include: 'Pending',
        /// 'Completed', 'Failed'</param>
        public EthereumTransactionHistoricalResponse(int? transactionIndex = default(int?), long? blockNumber = default(long?), string gas = default(string), string gasPrice = default(string), double? value = default(double?), string nonce = default(string), string transactionHash = default(string), string blockHash = default(string), string fromProperty = default(string), string to = default(string), int? blockTimestamp = default(int?), string contractAddress = default(string), string gasUsed = default(string), System.DateTime? blockTimeUtc = default(System.DateTime?), bool? hasError = default(bool?), string transactionStatus = default(string), string fee = default(string))
        {
            TransactionIndex = transactionIndex;
            BlockNumber = blockNumber;
            Gas = gas;
            GasPrice = gasPrice;
            Value = value;
            Nonce = nonce;
            TransactionHash = transactionHash;
            BlockHash = blockHash;
            FromProperty = fromProperty;
            To = to;
            BlockTimestamp = blockTimestamp;
            ContractAddress = contractAddress;
            GasUsed = gasUsed;
            BlockTimeUtc = blockTimeUtc;
            HasError = hasError;
            TransactionStatus = transactionStatus;
            Fee = fee;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "TransactionIndex")]
        public int? TransactionIndex { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BlockNumber")]
        public long? BlockNumber { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Gas")]
        public string Gas { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "GasPrice")]
        public string GasPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Value")]
        public double? Value { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Nonce")]
        public string Nonce { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "TransactionHash")]
        public string TransactionHash { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BlockHash")]
        public string BlockHash { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "From")]
        public string FromProperty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "To")]
        public string To { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BlockTimestamp")]
        public int? BlockTimestamp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ContractAddress")]
        public string ContractAddress { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "GasUsed")]
        public string GasUsed { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BlockTimeUtc")]
        public System.DateTime? BlockTimeUtc { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "HasError")]
        public bool? HasError { get; private set; }

        /// <summary>
        /// Gets or sets possible values include: 'Pending', 'Completed',
        /// 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "TransactionStatus")]
        public string TransactionStatus { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Fee")]
        public string Fee { get; set; }

    }
}
